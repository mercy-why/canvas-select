{"version":3,"file":"canvas-select.min.js","sources":["../src/shape/Shape.ts","../src/bridge.ts","../src/shape/Rect.ts","../src/shape/Polygon.ts","../src/shape/Dot.ts","../src/index.ts","../src/EventBus.ts"],"sourcesContent":["import { createUuid } from '../bridge'\nimport EventBus from '../EventBus'\n\nexport default class Shape {\n    public label: string = ''\n    public coor: any[] = []\n    public strokeStyle: string = ''\n    public fillStyle: string = ''\n    public labelFillStyle: string = ''\n    public labelFont: string = ''\n    public type: number // 形状\n    public active: boolean = false\n    public creating: boolean = false\n    public dragging: boolean = false\n    public index: number\n    public uuid: string = createUuid()\n    constructor(index: number, label: string, style: Record<string, any>, uuid: string) {\n        const { strokeStyle, fillStyle, labelFillStyle, labelFont } = style\n        this.index = index;\n        this.label = label;\n        this.strokeStyle = strokeStyle;\n        this.fillStyle = fillStyle;\n        this.labelFillStyle = labelFillStyle;\n        this.labelFont = labelFont;\n        if (uuid) this.uuid = uuid\n    }\n}\n","/**\n * 生成uuid\n * @returns\n */\nfunction createUuid(): string {\n    const s: any[] = [];\n    const hexDigits = '0123456789abcdef';\n    for (let i = 0; i < 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = '4';\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n    s[8] = s[13] = s[18] = s[23] = '-';\n    const uuid = s.join('');\n    return uuid;\n}\nexport { createUuid }","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Rect extends Shape {\n  type: number = 1\n  constructor(coor: Point[], index?: number, label?: string, style = {}, uuid?: string) {\n    super(index, label, style, uuid)\n    this.coor = coor;\n  }\n  get ctrlsData() {\n    const [[x0, y0], [x1, y1]] = this.coor as Point[];\n    return [\n      [x0, y0],\n      [x0 + (x1 - x0) / 2, y0],\n      [x1, y0],\n      [x1, y0 + (y1 - y0) / 2],\n      [x1, y1],\n      [x0 + (x1 - x0) / 2, y1],\n      [x0, y1],\n      [x0, y0 + (y1 - y0) / 2],\n    ];\n  }\n}\n","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Polygon extends Shape {\n  type: number = 2\n  constructor(coor: Point[], index?: number, label?: string, style = {}, uuid?: string) {\n    super(index, label, style, uuid)\n    this.coor = coor;\n  }\n  get ctrlsData() {\n    return this.coor.length > 2 ? this.coor : [];\n  }\n}\n","import { Point } from '../Types';\nimport Shape from './Shape';\n\nexport default class Dot extends Shape {\n    type: number = 3\n    constructor(coor: Point, index?: number, label?: string, style = {}, uuid?: string) {\n        super(index, label, style, uuid)\n        this.coor = coor;\n    }\n}\n","import Rect from './shape/Rect';\nimport Polygon from './shape/Polygon';\nimport Dot from './shape/Dot';\nimport { Point } from './Types';\nimport EventBus from './EventBus';\n\nexport default class CanvasSelect extends EventBus {\n    lock: boolean = false // 只读模式\n\n    MIN_WIDTH: number = 10\n\n    MIN_HEIGHT: number = 10\n\n    strokeStyle = 'rgb(0, 0, 255)'\n\n    fillStyle = 'rgba(0, 0, 255,0.1)'\n\n    activeStrokeStyle = '#f00'\n\n    activeFillStyle = 'rgba(255, 0, 0,0.1)'\n\n    ctrlStrokeStyle = '#000'\n\n    ctrlFillStyle = '#fff'\n\n    ctrlRadius = 3\n\n    labelFillStyle = '#000'\n\n    labelFont = '12px serif'\n\n    labelMaxLen = 5\n\n    WIDTH: number\n\n    HEIGHT: number\n\n    canvas: HTMLCanvasElement\n\n    ctx: CanvasRenderingContext2D\n\n    dataset: Array<Rect | Polygon | Dot> = []\n\n    offlineCanvas: HTMLCanvasElement\n\n    offlineCtx: CanvasRenderingContext2D\n\n    remmber: number[][] // 记录锚点距离\n\n    movePoint: Point // 记录鼠标位置\n\n    remmberOrigin: number[] = [0, 0] // 记录背景图鼠标位移\n\n    createType: number = 0 // 0 不创建，1 创建矩形，2 创建多边形，3 创建点\n\n    ctrlIndex: number = -1\n\n    cursor: string = 'auto'\n\n    image: HTMLImageElement = new Image()\n\n    imageLoaded: false\n\n    IMAGE_ORIGIN_WIDTH: number;\n\n    IMAGE_WIDTH: number;\n\n    IMAGE_ORIGIN_HEIGHT: number;\n\n    IMAGE_HEIGHT: number;\n\n    originX: number = 0; // 原点x\n\n    originY: number = 0; // 原点y\n\n    scaleStep: number = 0; // 缩放步长\n\n    canStart: Promise<any>\n\n    constructor(el: HTMLCanvasElement | string, imgSrc?: string) {\n        super()\n        const container = typeof el === 'string' ? document.querySelector(el) : el;\n        if (Object.prototype.toString.call(container).includes('HTMLCanvasElement')) {\n            this.canvas = container as HTMLCanvasElement;\n            this.ctx = this.canvas.getContext('2d');\n            this.WIDTH = this.canvas.clientWidth;\n            this.HEIGHT = this.canvas.clientHeight;\n            this.offlineCanvas = document.createElement('canvas');\n            this.offlineCanvas.width = this.WIDTH;\n            this.offlineCanvas.height = this.HEIGHT;\n            this.offlineCtx = this.offlineCanvas.getContext('2d');\n            this.initScreen();\n            if (imgSrc) {\n                this.setImage(imgSrc)\n            }\n        } else {\n            console.warn('HTMLCanvasElement is required!');\n        }\n    }\n\n    get activeShape() {\n        return this.dataset.find(x => x.active);\n    }\n\n    get scale() {\n        if (this.IMAGE_ORIGIN_WIDTH && this.IMAGE_WIDTH) {\n            return this.IMAGE_WIDTH / this.IMAGE_ORIGIN_WIDTH;\n        }\n        return 1;\n    }\n    /**\n     * 初始化\n     */\n    initScreen() {\n        this.canvas.style.userSelect = 'none';\n        this.canStart = new Promise((resolve) => {\n            if (this.imageLoaded) {\n                resolve(true)\n            } else {\n                this.image.addEventListener('load', () => {\n                    this.emit('load');\n                    this.IMAGE_ORIGIN_WIDTH = this.IMAGE_WIDTH = this.image.width;\n                    this.IMAGE_ORIGIN_HEIGHT = this.IMAGE_HEIGHT = this.image.height;\n                    this.fitZoom();\n                    resolve(true)\n                });\n            }\n        })\n\n        // this.canvas.addEventListener('contextmenu', (e) => {\n        //     if (this.lock) return;\n        //     e.preventDefault();\n        // });\n        // this.canvas.addEventListener('mousewheel', (e: WheelEvent) => {\n        //     if (this.lock) return;\n        //     e.preventDefault();\n        //     this.setScale(e.deltaY < 0);\n        //     const offsetX = Math.round(e.offsetX / this.scale);\n        //     const offsetY = Math.round(e.offsetY / this.scale);\n        //     this.movePoint = [offsetX, offsetY];\n        //     this.update()\n        // });\n        this.canvas.addEventListener('mousedown', (e: MouseEvent) => {\n            if (this.lock) return;\n            const offsetX = Math.round(e.offsetX / this.scale);\n            const offsetY = Math.round(e.offsetY / this.scale);\n            const mousePoint: Point = [e.offsetX, e.offsetY];\n            if (e.buttons === 2) { // 鼠标右键\n                // this.remmberOrigin = [e.offsetX - this.originX, e.offsetY - this.originY];\n            } else if (e.buttons === 1) { // 鼠标左键\n                // 点击到控制点\n                // @ts-ignore\n                const ctrls = this.activeShape?.ctrlsData || [];\n                this.ctrlIndex = ctrls.findIndex((coor: Point) => this.isPointInCircle(mousePoint, coor, this.ctrlRadius));\n                if (this.ctrlIndex > -1) {\n                    const [x0, y0] = ctrls[this.ctrlIndex];\n                    this.remmber = [[offsetX - x0, offsetY - y0]];\n                    return;\n                }\n                // 是否点击到形状\n                const [hitShapeIndex, hitShape] = this.hitOnShape(mousePoint);\n                // 是否正在创建多边形\n                const oncreating = this.activeShape?.type === 2 && this.activeShape.creating;\n                if (oncreating) {\n                    // 多边形新增点\n                    if (this.isInBackground(e)) {\n                        const pShape = this.activeShape as Polygon;\n                        const [x, y] = pShape.coor[pShape.coor.length - 1];\n                        if (x !== offsetX && y !== offsetY) {\n                            const nx = Math.round(offsetX - this.originX / this.scale)\n                            const ny = Math.round(offsetY - this.originY / this.scale)\n                            pShape.coor.push([nx, ny]);\n                            this.update();\n                        }\n                    }\n                } else if (hitShapeIndex > -1) {\n                    this.emit('select', hitShape)\n                    this.dataset.forEach((item, i) => {\n                        item.active = i === hitShapeIndex;\n                    });\n                    hitShape.dragging = true;\n                    this.dataset.splice(hitShapeIndex, 1);\n                    this.dataset.push(hitShape);\n                    this.remmber = [];\n                    if (hitShape.type === 3) {\n                        const [x, y] = hitShape.coor;\n                        this.remmber = [[offsetX - x, offsetY - y]];\n                    } else {\n                        hitShape.coor.forEach((pt: any) => {\n                            this.remmber.push([offsetX - pt[0], offsetY - pt[1]]);\n                        });\n                    }\n                    this.update();\n                } else if (this.createType > 0 && this.isInBackground(e)) {\n                    // 创建矩形/多边形\n                    let newShape;\n                    const nx = Math.round(offsetX - this.originX / this.scale)\n                    const ny = Math.round(offsetY - this.originY / this.scale)\n                    const curPoint: Point = [nx, ny];\n                    if (this.createType === 1) {\n                        newShape = new Rect([curPoint, curPoint], this.dataset.length);\n                        newShape.creating = true;\n                    } else if (this.createType === 2) {\n                        newShape = new Polygon([curPoint], this.dataset.length);\n                        newShape.creating = true;\n                    } else if (this.createType === 3) {\n                        newShape = new Dot(curPoint, this.dataset.length);\n                        this.emit('add', newShape)\n                    }\n                    this.dataset.forEach((sp) => { sp.active = false; });\n                    newShape.active = true;\n                    this.dataset.push(newShape);\n                    this.emit('updated', newShape)\n                    this.update();\n                } else if (this.activeShape) {\n                    this.activeShape.active = false;\n                    this.update();\n                }\n            }\n        });\n        this.canvas.addEventListener('mousemove', (e: MouseEvent) => {\n            if (this.lock) return;\n            const offsetX = Math.round(e.offsetX / this.scale);\n            const offsetY = Math.round(e.offsetY / this.scale);\n            // 记录鼠标位置\n            this.movePoint = [offsetX, offsetY];\n            if (e.buttons === 2 && e.which === 3) {\n                // 拖动背景\n                // this.originX = Math.round(e.offsetX - this.remmberOrigin[0]);\n                // this.originY = Math.round(e.offsetY - this.remmberOrigin[1]);\n                // this.update();\n            } else if (e.buttons === 1 && this.activeShape) {\n                if (this.ctrlIndex > -1 && this.isInBackground(e)) {\n                    const [[x, y]] = this.remmber;\n                    // resize矩形\n                    if (this.activeShape.type === 1) {\n                        const [[x0, y0], [x1, y1]] = (this.activeShape as Rect).coor;\n                        let coor: Point[] = [];\n                        switch (this.ctrlIndex) {\n                            case 0:\n                                coor = [[offsetX - x, offsetY - y], [x1, y1]];\n                                break;\n                            case 1:\n                                coor = [[x0, offsetY - y], [x1, y1]];\n                                break;\n                            case 2:\n                                coor = [[x0, offsetY - y], [offsetX - x, y1]];\n                                break;\n                            case 3:\n                                coor = [[x0, y0], [offsetX - x, y1]];\n                                break;\n                            case 4:\n                                coor = [[x0, y0], [offsetX - x, offsetY - y]];\n                                break;\n                            case 5:\n                                coor = [[x0, y0], [x1, offsetY - y]];\n                                break;\n                            case 6:\n                                coor = [[offsetX - x, y0], [x1, offsetY - y]];\n                                break;\n                            case 7:\n                                coor = [[offsetX - x, y0], [x1, y1]];\n                                break;\n                            default:\n                                break;\n                        }\n                        const [[a0, b0], [a1, b1]] = coor;\n                        if ((a1 - a0) >= this.MIN_WIDTH && (b1 - b0) >= this.MIN_HEIGHT) {\n                            this.activeShape.coor = coor;\n                        } else {\n                            this.emit('error', `宽不能小于${this.MIN_WIDTH},高不能小于${this.MIN_HEIGHT}。`);\n                        }\n                    } else if (this.activeShape.type === 2) {\n                        const nx = Math.round(offsetX - this.originX / this.scale)\n                        const ny = Math.round(offsetY - this.originY / this.scale)\n                        const newPoint = [nx, ny]\n                        this.activeShape.coor.splice(this.ctrlIndex, 1, newPoint);\n                    }\n                } else if (this.activeShape.dragging) { // 拖拽\n                    let coor = [];\n                    let noLimit = true\n                    const w = this.IMAGE_ORIGIN_WIDTH || this.WIDTH;\n                    const h = this.IMAGE_ORIGIN_HEIGHT || this.HEIGHT;\n                    if (this.activeShape.type === 3) {\n                        const [t1, t2] = this.remmber[0];\n                        const x = offsetX - t1;\n                        const y = offsetY - t2;\n                        if (x < 0 || x > w || y < 0 || y > h) noLimit = false;\n                        coor = [x, y];\n                    } else {\n                        for (let i = 0; i < this.activeShape.coor.length; i++) {\n                            const tar = this.remmber[i];\n                            const x = offsetX - tar[0];\n                            const y = offsetY - tar[1];\n                            if (x < 0 || x > w || y < 0 || y > h) noLimit = false\n                            coor.push([x, y]);\n                        }\n                    }\n                    if (noLimit) this.activeShape.coor = coor;\n                } else if (this.activeShape.creating && this.activeShape.type === 1 && this.isInBackground(e)) {\n                    // 创建矩形\n                    const x = Math.round(offsetX - this.originX / this.scale);\n                    const y = Math.round(offsetY - this.originY / this.scale);\n                    this.activeShape.coor.splice(1, 1, [x, y]);\n                }\n                this.emit('updated', this.activeShape)\n                this.update();\n            } else if (this.activeShape?.type === 2 && (this.activeShape as Polygon)?.creating) {\n                // 多边形添加点\n                this.update();\n            }\n        });\n        this.canvas.addEventListener('mouseup', (e) => {\n            if (this.lock) return;\n            this.remmber = [];\n            if (this.activeShape) {\n                this.activeShape.dragging = false;\n                if (this.activeShape.creating && this.activeShape.type === 1) {\n                    const [[x0, y0], [x1, y1]] = this.activeShape.coor;\n                    if (Math.abs(x0 - x1) < this.MIN_WIDTH || Math.abs(y0 - y1) < this.MIN_HEIGHT) {\n                        this.dataset.pop();\n                        this.emit('error', `宽不能小于${this.MIN_WIDTH},高不能小于${this.MIN_HEIGHT}`);\n                    } else {\n                        this.activeShape.coor = [[Math.min(x0, x1), Math.min(y0, y1)], [Math.max(x0, x1), Math.max(y0, y1)]];\n                        this.activeShape.creating = false;\n                        this.emit('add', this.activeShape);\n                    }\n                    this.update();\n                }\n            }\n        });\n        this.canvas.addEventListener('dblclick', () => {\n            if (this.lock) return;\n            if (this.activeShape?.type === 2) {\n                if (this.activeShape.coor.length > 2) {\n                    this.emit('add', this.activeShape);\n                    this.emit('updated', this.activeShape);\n                    this.activeShape.creating = false;\n                    this.update();\n                }\n            }\n        });\n        document.body.addEventListener('keyup', (e: KeyboardEvent) => {\n            if (this.lock) return;\n            if (this.activeShape) {\n                if (this.activeShape.type === 2 && e.key === 'Escape') {\n                    if (this.activeShape.coor.length > 1 && this.activeShape.creating) {\n                        this.activeShape.coor.pop();\n                    } else {\n                        this.deleteByIndex(this.activeShape.index);\n                    }\n                    this.update();\n                } else if (e.key === 'Backspace') {\n                    this.deleteByIndex(this.activeShape.index);\n                }\n            }\n        });\n    }\n    /**\n     * 添加/切换图片\n     * @param url 图片链接\n     */\n    setImage(url: string) {\n        this.imageLoaded = false\n        this.image.src = url\n    }\n    /**\n     * 设置数据\n     * @param data Array\n     */\n    async setData(data: any[]) {\n        let initdata: any[] = []\n        try {\n            await this.canStart\n            data.forEach((item, index) => {\n                if (Object.prototype.toString.call(item).indexOf('Object') > -1) {\n                    const { label, type, coor, strokeStyle, fillStyle, labelFillStyle, labelFont, uuid } = item;\n                    const style = { strokeStyle, fillStyle, labelFillStyle, labelFont }\n                    let shape\n                    switch (type) {\n                        case 1:\n                            shape = new Rect(coor, index, label, style, uuid);\n                            break;\n                        case 2:\n                            shape = new Polygon(coor, index, label, style, uuid);\n                            break;\n                        case 3:\n                            shape = new Dot(coor, index, label, style, uuid);\n                            break;\n                        default:\n                            break;\n                    }\n                    initdata.push(shape);\n                } else {\n                    this.emit('error', `${item} in data must be an enumerable Object.`);\n                }\n            });\n            this.dataset = initdata\n            this.update();\n        } catch (error) {\n            this.emit('error', error);\n        }\n    }\n    /**\n     * 判断是否在标注实例上\n     * @param mousePoint 点击位置\n     * @returns \n     */\n    hitOnShape(mousePoint: Point): [number, Rect | Polygon | Dot] {\n        let hitShapeIndex = -1;\n        const hitShape = this.dataset.reduceRight((target, shape, i) => {\n            if (!target) {\n                if (\n                    (shape.type === 3 && this.isPointInCircle(mousePoint, shape.coor as Point, 3))\n                    || (shape.type === 1 && this.isPointInRect(mousePoint, (shape as Rect).coor))\n                    || (shape.type === 2 && this.isPointInPolygon(mousePoint, (shape as Polygon).coor))\n                ) {\n                    hitShapeIndex = i;\n                    target = shape;\n                }\n            }\n            return target;\n        }, null);\n        return [hitShapeIndex, hitShape];\n    }\n\n    /**\n     * 判断鼠标是否在背景图内部\n     * @param e MouseEvent\n     * @returns 布尔值\n     */\n    isInBackground(e: MouseEvent): boolean {\n        const offsetX = e.offsetX / this.scale;\n        const offsetY = e.offsetY / this.scale;\n        return offsetX >= this.originX / this.scale && offsetY >= this.originY / this.scale\n            && offsetX <= this.originX / this.scale + this.IMAGE_ORIGIN_WIDTH && offsetY <= this.originY / this.scale + this.IMAGE_ORIGIN_HEIGHT;\n    }\n    /**\n     * 判断是否在矩形内\n     * @param point 坐标\n     * @param coor 区域坐标\n     * @returns 布尔值\n     */\n    isPointInRect(point: Point, coor: Point[]): boolean {\n        const [x, y] = point;\n        const [[x0, y0], [x1, y1]] = coor.map((a) => a.map((b) => b * this.scale));\n        return x0 + this.originX <= x && x <= x1 + this.originX && y0 + this.originY <= y && y <= y1 + this.originY;\n    }\n    /**\n     * 判断是否在多边形内\n     * @param point 坐标\n     * @param coor 区域坐标\n     * @returns 布尔值\n     */\n    isPointInPolygon(point: Point, coor: Point[]): boolean {\n        this.offlineCtx.save();\n        this.offlineCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n        this.offlineCtx.translate(this.originX, this.originY);\n        this.offlineCtx.beginPath();\n        coor.forEach((pt, i) => {\n            const [x, y] = pt.map((a) => Math.round(a * this.scale));\n            if (i === 0) {\n                this.offlineCtx.moveTo(x, y);\n            } else {\n                this.offlineCtx.lineTo(x, y);\n            }\n        });\n        this.offlineCtx.closePath();\n        this.offlineCtx.fill();\n        const areaData = this.offlineCtx.getImageData(0, 0, this.WIDTH, this.HEIGHT);\n        const index = (point[1] - 1) * this.WIDTH * 4 + point[0] * 4;\n        this.offlineCtx.restore();\n        return areaData.data[index + 3] !== 0;\n    }\n    /**\n     * 判断是否在圆内\n     * @param point 坐标\n     * @param center 圆心\n     * @param r 半径\n     * @returns 布尔值\n     */\n    isPointInCircle(point: Point, center: Point, r: number): boolean {\n        const [x, y] = point;\n        const [x0, y0] = center.map((a) => a * this.scale);\n        const distance = Math.sqrt((x0 + this.originX - x) ** 2 + (y0 + this.originY - y) ** 2);\n        return distance <= r;\n    }\n    /**\n     * 绘制矩形\n     * @param shape 标注实例\n     * @returns \n     */\n    drawRect(shape: Rect) {\n        if (shape.coor.length !== 2) return;\n        const { labelFillStyle, labelFont, strokeStyle, fillStyle, active, creating, coor, label } = shape\n        const [[x0, y0], [x1, y1]] = coor.map((a: Point) => a.map((b) => Math.round(b * this.scale)));\n        this.ctx.save();\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\n        const w = x1 - x0;\n        const h = y1 - y0;\n        this.ctx.strokeRect(x0, y0, w, h);\n        if (!creating) this.ctx.fillRect(x0, y0, w, h);\n        this.ctx.restore();\n        this.drawLabel(coor[0], label, labelFillStyle, labelFont);\n    }\n    /**\n     * 绘制多边形\n     * @param shape 标注实例\n     */\n    drawPolygon(shape: Polygon) {\n        const { labelFillStyle, labelFont, strokeStyle, fillStyle, active, creating, coor, label } = shape\n        this.ctx.save();\n        this.ctx.fillStyle = fillStyle || this.fillStyle;\n        this.ctx.strokeStyle = (active || creating) ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\n        this.ctx.beginPath();\n        coor.forEach((el: Point, i) => {\n            const [x, y] = el.map((a) => Math.round(a * this.scale));\n            if (i === 0) {\n                this.ctx.moveTo(x, y);\n            } else {\n                this.ctx.lineTo(x, y);\n            }\n        });\n        if (creating) {\n            const [x, y] = this.movePoint.map((a) => Math.round(a * this.scale));\n            this.ctx.lineTo(x - this.originX, y - this.originY);\n        } else if (coor.length > 2) {\n            this.ctx.closePath();\n        }\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.drawLabel(coor[0], label, labelFillStyle, labelFont);\n    }\n    /**\n     * 绘制点\n     * @param shape 标注实例\n     */\n    drawDot(shape: Dot) {\n        const { labelFillStyle, labelFont, strokeStyle, fillStyle, active, coor, label } = shape\n        const [x, y] = coor.map((a) => a * this.scale);\n        this.ctx.save();\n        this.ctx.fillStyle = fillStyle || this.ctrlFillStyle;\n        this.ctx.strokeStyle = active ? this.activeStrokeStyle : (strokeStyle || this.strokeStyle);\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.drawLabel(coor as Point, label, labelFillStyle, labelFont);\n    }\n    /**\n     * 绘制控制点\n     * @param point 坐标\n     */\n    drawCtrl(point: Point) {\n        const [x, y] = point.map((a) => a * this.scale);\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.ctrlFillStyle;\n        this.ctx.strokeStyle = this.ctrlStrokeStyle;\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n        this.ctx.arc(x, y, this.ctrlRadius, 0, 2 * Math.PI, true);\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    /**\n     * 绘制控制点列表\n     * @param shape 标注实例\n     */\n    drawCtrlList(shape: Rect | Polygon) {\n        shape.ctrlsData.forEach((point) => {\n            this.drawCtrl(point);\n        });\n    }\n    /**\n     * 绘制label\n     * @param point 位置\n     * @param label 文本\n     */\n    drawLabel(point: Point, label: string = '', labelFillStyle = '', labelFont = '') {\n        if (label.length) {\n            const newStr = label.length < this.labelMaxLen + 1 ? label : (`${label.substr(0, this.labelMaxLen)}...`);\n            const text = this.ctx.measureText(newStr);\n            const [x, y] = point.map((a) => a * this.scale);\n            const toleft = (this.IMAGE_ORIGIN_WIDTH - point[0]) < (text.width + 4) / this.scale;\n            const toTop = (this.IMAGE_ORIGIN_HEIGHT - point[1]) < 16 / this.scale;\n            this.ctx.save();\n            // this.ctx.fillRect(toleft ? (x - text.width - 3) : (x + 1), toTop ? (y - 15) : y + 1, text.width + 4, 16);\n            this.ctx.fillStyle = labelFillStyle || this.labelFillStyle;\n            this.ctx.font = labelFont || this.labelFont;\n            this.ctx.fillText(newStr, toleft ? (x - text.width - 2) : (x + 2), toTop ? (y - 4) : y + 12, 80);\n            this.ctx.restore();\n        }\n    }\n\n    /**\n     * 绘制背景图片\n     */\n    paintImage() {\n        this.ctx.drawImage(this.image, 0, 0, this.IMAGE_WIDTH, this.IMAGE_HEIGHT);\n    }\n\n    clear() {\n        this.ctx.clearRect(0, 0, this.WIDTH, this.HEIGHT);\n    }\n\n    /**\n     * 更新画布\n     */\n    update() {\n        this.ctx.save();\n        this.clear();\n        this.ctx.translate(this.originX, this.originY);\n        this.paintImage();\n        this.dataset.forEach((shape) => {\n            switch (shape.type) {\n                case 1:\n                    this.drawRect(shape as Rect);\n                    break;\n                case 2:\n                    this.drawPolygon(shape as Polygon);\n                    break;\n                case 3:\n                    this.drawDot(shape as Dot);\n                    break;\n                default:\n                    break;\n            }\n        });\n        if (this.activeShape && [1, 2].includes(this.activeShape.type)) {\n            this.drawCtrlList(this.activeShape as Rect | Polygon);\n        }\n        this.ctx.restore();\n    }\n\n    /**\n     * 删除指定矩形\n     * @param index number\n     */\n    deleteByIndex(index: number) {\n        const num = this.dataset.findIndex((x) => x.index === index);\n        if (num > -1) {\n            this.emit('delete', this.dataset[num]);\n            this.dataset.splice(num, 1);\n            this.dataset.forEach((item, i) => { item.index = i; });\n            this.update();\n        }\n    }\n\n    /**\n     * 计算缩放步长\n     * @param init 是否为init\n     */\n    calcStep(init?: boolean) {\n        if (init) {\n            this.scaleStep = 100;\n            this.setScale(false);\n        }\n        if (this.IMAGE_WIDTH > this.WIDTH || this.IMAGE_HEIGHT > this.HEIGHT) {\n            this.setScale(false);\n            this.calcStep();\n        }\n    }\n\n    /**\n     * 缩放\n     * @param type true放大，false，缩小\n     */\n    setScale(type: boolean) {\n        if (this.lock) return;\n        if ((!type && this.IMAGE_WIDTH <= 20) || (type && this.IMAGE_WIDTH >= this.WIDTH * 100)) return;\n        if (type) { this.scaleStep++; } else { this.scaleStep--; }\n        const abs = Math.abs(this.scaleStep);\n        const width = this.IMAGE_WIDTH;\n        this.IMAGE_WIDTH = Math.round(this.IMAGE_ORIGIN_WIDTH * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\n        this.IMAGE_HEIGHT = Math.round(this.IMAGE_ORIGIN_HEIGHT * (this.scaleStep >= 0 ? 1.05 : 0.95) ** abs);\n        this.stayPosition(this.IMAGE_WIDTH / width);\n        this.update();\n    }\n\n    /**\n     * 适配背景图\n     */\n    fitZoom() {\n        this.calcStep(true);\n        if (this.IMAGE_HEIGHT / this.IMAGE_WIDTH >= this.HEIGHT / this.WIDTH) {\n            this.IMAGE_WIDTH = this.IMAGE_ORIGIN_WIDTH / (this.IMAGE_ORIGIN_HEIGHT / this.HEIGHT);\n            this.IMAGE_HEIGHT = this.HEIGHT;\n        } else {\n            this.IMAGE_WIDTH = this.WIDTH;\n            this.IMAGE_HEIGHT = this.IMAGE_ORIGIN_HEIGHT / (this.IMAGE_ORIGIN_WIDTH / this.WIDTH);\n        }\n        this.originX = (this.WIDTH - this.IMAGE_WIDTH) / 2;\n        this.originY = (this.HEIGHT - this.IMAGE_HEIGHT) / 2;\n        this.update();\n    }\n\n    /**\n     * 保持缩放中心\n     * @param scale nummer\n     */\n    stayPosition(scale: number) {\n        this.originX = this.WIDTH / 2 - (this.WIDTH / 2 - this.originX) * scale;\n        this.originY = this.HEIGHT / 2 - (this.HEIGHT / 2 - this.originY) * scale;\n    }\n}\n\n","export default class EventBus {\n    public _eventTree: Record<string, any> = {}\n    /**\n   * 注册事件\n   * @param eventName 事件名称\n   * @param cb 回调方法\n   */\n    on(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.push(cb);\n        } else {\n            this._eventTree[eventName] = [cb];\n        }\n    }\n\n    /**\n     * 触发事件\n     * @param eventName 事件名称\n     * @param payload 传递参数\n     */\n    emit(eventName: string, ...payload: any) {\n        const fns = this._eventTree[eventName];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => fn(...payload));\n        }\n    }\n\n    /**\n     * 注销事件\n     * @param eventName 事件名称\n     * @param cb 传递参数\n     */\n    off(eventName: string, cb: Function) {\n        const fns = this._eventTree[eventName];\n        const index = fns.find((fn: Function) => fn === cb);\n        if (Array.isArray(fns) && index) {\n            fns.splice(index, 1);\n        }\n    }\n}\n"],"names":["Shape","index","label","style","uuid","this","coor","strokeStyle","fillStyle","labelFillStyle","labelFont","active","creating","dragging","s","hexDigits","i","substr","Math","floor","random","join","createUuid","Rect","_super","_this","call","type","__extends","Object","defineProperty","prototype","get","_a","__read","_b","x0","y0","_c","x1","y1","Polygon","length","Dot","CanvasSelect","el","imgSrc","lock","MIN_WIDTH","MIN_HEIGHT","activeStrokeStyle","activeFillStyle","ctrlStrokeStyle","ctrlFillStyle","ctrlRadius","labelMaxLen","dataset","remmberOrigin","createType","ctrlIndex","cursor","image","Image","originX","originY","scaleStep","container","document","querySelector","toString","includes","canvas","ctx","getContext","WIDTH","clientWidth","HEIGHT","clientHeight","offlineCanvas","createElement","width","height","offlineCtx","initScreen","setImage","console","warn","find","x","IMAGE_ORIGIN_WIDTH","IMAGE_WIDTH","userSelect","canStart","Promise","resolve","imageLoaded","addEventListener","emit","IMAGE_ORIGIN_HEIGHT","IMAGE_HEIGHT","fitZoom","e","offsetX","round","scale","offsetY","mousePoint","buttons","ctrls","activeShape","ctrlsData","findIndex","isPointInCircle","remmber","_d","hitOnShape","hitShapeIndex_1","hitShape","isInBackground","pShape","_e","y","nx","ny","push","update","forEach","item","splice","_f","pt","newShape","curPoint","sp","movePoint","which","_g","_h","_j","a0","b0","_k","a1","b1","concat","newPoint","noLimit","w","h","_l","t1","tar","abs","pop","min","max","body","key","deleteByIndex","url","src","setData","data","initdata","sent","indexOf","shape","error_1","hitShapeIndex","reduceRight","target","isPointInRect","isPointInPolygon","point","map","a","b","save","clearRect","translate","beginPath","moveTo","lineTo","closePath","fill","areaData","getImageData","restore","center","r","sqrt","pow","drawRect","strokeRect","fillRect","drawLabel","drawPolygon","stroke","drawDot","arc","PI","drawCtrl","drawCtrlList","newStr","text","measureText","toleft","toTop","font","fillText","paintImage","drawImage","clear","num","calcStep","init","setScale","stayPosition","EventBus","_eventTree","on","eventName","cb","fns","Array","isArray","payload","_i","arguments","fn","apply","__spreadArray","off"],"mappings":"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"}